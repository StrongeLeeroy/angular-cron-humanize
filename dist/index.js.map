{"version":3,"sources":["webpack:///dist/index.js","webpack:///webpack/bootstrap a4392c59c64cc3594c1e","webpack:///./src/cron-humanize.ts"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","CONSTANTS","SEPARATOR","COMA","DASH","WILDCARD","UNSPECIFIED","SLASH","TYPE_MULTI","TYPE_RANGE","TYPE_SINGLE","TYPE_WILDCARD","TYPE_UNSPECIFIED","TYPE_INTERVAL","SHORT_DAYS","FULL_DAYS","SHORT_MONTHS","FULL_MONTHS","UnitDefinition","rawData","names","indexBase","this","type","setType","multi","getMultiDef","range","getRangeDef","interval","getIntervalDef","unspecified","getDef","wildcard","single","getSingleDef","prototype","value","indexOf","checkForNamed","isNaN","parseInt","getIndex","_this","values","split","map","current","last","pop","start","end","step","CronExpression","expressionString","setDissection","seconds","dissection","minutes","hours","dayOfMonth","month","dayOfWeek","year","getKey","key","expression","Error","exprArray","length","error","getDissection","CronParser","humanize","cron","order","result","getTimeString","getDayOfMonthString","_i","order_1","getString","getMonthString","getDayOfWeekString","getYearString","padZero","getSecondsString","getHoursString","getMinutesString","join","isOne","getOrdinal","pad","numString","toString","converted","years","months","getMonthName","days","getDayOfWeekName","day","angular","service"],"mappings":"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","file":"./dist/index.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\texports.CONSTANTS = {\r\n\t    SEPARATOR: ' ',\r\n\t    COMA: ',',\r\n\t    DASH: '-',\r\n\t    WILDCARD: '*',\r\n\t    UNSPECIFIED: '?',\r\n\t    SLASH: '/',\r\n\t    TYPE_MULTI: 'multi',\r\n\t    TYPE_RANGE: 'range',\r\n\t    TYPE_SINGLE: 'single',\r\n\t    TYPE_WILDCARD: 'wildcard',\r\n\t    TYPE_UNSPECIFIED: 'unspecified',\r\n\t    TYPE_INTERVAL: 'interval',\r\n\t    SHORT_DAYS: ['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN'],\r\n\t    FULL_DAYS: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\r\n\t    SHORT_MONTHS: ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'],\r\n\t    FULL_MONTHS: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\r\n\t};\r\n\tvar UnitDefinition = (function () {\r\n\t    function UnitDefinition(rawData, names, indexBase) {\r\n\t        this.rawData = rawData;\r\n\t        this.names = names;\r\n\t        this.indexBase = indexBase;\r\n\t        this.type = this.setType(rawData);\r\n\t        switch (this.type) {\r\n\t            case exports.CONSTANTS.TYPE_MULTI:\r\n\t                this.multi = this.getMultiDef(rawData);\r\n\t                break;\r\n\t            case exports.CONSTANTS.TYPE_RANGE:\r\n\t                this.range = this.getRangeDef(rawData);\r\n\t                break;\r\n\t            case exports.CONSTANTS.TYPE_INTERVAL:\r\n\t                this.interval = this.getIntervalDef(rawData);\r\n\t                break;\r\n\t            case exports.CONSTANTS.TYPE_UNSPECIFIED:\r\n\t                this.unspecified = this.getDef(rawData);\r\n\t                break;\r\n\t            case exports.CONSTANTS.TYPE_WILDCARD:\r\n\t                this.wildcard = this.getDef(rawData);\r\n\t                break;\r\n\t            case exports.CONSTANTS.TYPE_SINGLE:\r\n\t                this.single = this.getSingleDef(rawData);\r\n\t                break;\r\n\t        }\r\n\t    }\r\n\t    UnitDefinition.prototype.setType = function (value) {\r\n\t        if (value.indexOf(exports.CONSTANTS.COMA) > 0) {\r\n\t            return exports.CONSTANTS.TYPE_MULTI;\r\n\t        }\r\n\t        else if (value.indexOf(exports.CONSTANTS.WILDCARD) >= 0) {\r\n\t            return exports.CONSTANTS.TYPE_WILDCARD;\r\n\t        }\r\n\t        else if (value.indexOf(exports.CONSTANTS.UNSPECIFIED) >= 0) {\r\n\t            return exports.CONSTANTS.TYPE_UNSPECIFIED;\r\n\t        }\r\n\t        else if (value.indexOf(exports.CONSTANTS.SLASH) > 0) {\r\n\t            return exports.CONSTANTS.TYPE_INTERVAL;\r\n\t        }\r\n\t        else if (value.indexOf(exports.CONSTANTS.DASH) > 0) {\r\n\t            return exports.CONSTANTS.TYPE_RANGE;\r\n\t        }\r\n\t        else {\r\n\t            return exports.CONSTANTS.TYPE_SINGLE;\r\n\t        }\r\n\t    };\r\n\t    UnitDefinition.prototype.checkForNamed = function (value) {\r\n\t        return isNaN(parseInt(value)) ? this.getIndex(value) : parseInt(value);\r\n\t    };\r\n\t    UnitDefinition.prototype.getMultiDef = function (value) {\r\n\t        var _this = this;\r\n\t        var values = value.split(exports.CONSTANTS.COMA).map(function (current) { return _this.checkForNamed(current); }), last = values.pop();\r\n\t        return { values: values, last: last };\r\n\t    };\r\n\t    UnitDefinition.prototype.getRangeDef = function (value) {\r\n\t        var _this = this;\r\n\t        var range = value.split(exports.CONSTANTS.DASH).map(function (current) { return _this.checkForNamed(current); });\r\n\t        return {\r\n\t            start: range[0],\r\n\t            end: range[1]\r\n\t        };\r\n\t    };\r\n\t    UnitDefinition.prototype.getIntervalDef = function (value) {\r\n\t        var _this = this;\r\n\t        var interval = value.split('/').map(function (current) { return _this.checkForNamed(current); });\r\n\t        return {\r\n\t            start: interval[0],\r\n\t            step: interval[1]\r\n\t        };\r\n\t    };\r\n\t    UnitDefinition.prototype.getDef = function (value) {\r\n\t        return value;\r\n\t    };\r\n\t    UnitDefinition.prototype.getSingleDef = function (value) {\r\n\t        return this.checkForNamed(value);\r\n\t    };\r\n\t    UnitDefinition.prototype.getIndex = function (value) {\r\n\t        return this.names.indexOf(value) + this.indexBase;\r\n\t    };\r\n\t    return UnitDefinition;\r\n\t}());\r\n\texports.UnitDefinition = UnitDefinition;\r\n\tvar CronExpression = (function () {\r\n\t    function CronExpression(expressionString) {\r\n\t        this.expressionString = expressionString;\r\n\t        this.setDissection(expressionString);\r\n\t        this.seconds = new UnitDefinition(this.dissection.seconds);\r\n\t        this.minutes = new UnitDefinition(this.dissection.minutes);\r\n\t        this.hours = new UnitDefinition(this.dissection.hours);\r\n\t        this.dayOfMonth = new UnitDefinition(this.dissection.dayOfMonth);\r\n\t        this.month = new UnitDefinition(this.dissection.month, exports.CONSTANTS.SHORT_MONTHS, 0);\r\n\t        this.dayOfWeek = new UnitDefinition(this.dissection.dayOfWeek, exports.CONSTANTS.SHORT_DAYS, 1);\r\n\t        this.year = new UnitDefinition(this.dissection.year);\r\n\t    }\r\n\t    CronExpression.prototype.getKey = function (key) {\r\n\t        return this[key];\r\n\t    };\r\n\t    CronExpression.prototype.setDissection = function (expression) {\r\n\t        if (!expression) {\r\n\t            throw new Error('A valid cron expression or generated expression must be provided.');\r\n\t        }\r\n\t        else if (typeof expression === 'string') {\r\n\t            var exprArray = expression.split(exports.CONSTANTS.SEPARATOR);\r\n\t            if (exprArray.length > 7 || exprArray.length < 6) {\r\n\t                throw new Error(\"Invalid cron expression: \" + expression + \". Wrong length: \" + exprArray.length + \".\");\r\n\t            }\r\n\t            this.dissection = {\r\n\t                seconds: exprArray[0],\r\n\t                minutes: exprArray[1],\r\n\t                hours: exprArray[2],\r\n\t                dayOfMonth: exprArray[3],\r\n\t                month: exprArray[4],\r\n\t                dayOfWeek: exprArray[5],\r\n\t                year: exprArray[6]\r\n\t            };\r\n\t        }\r\n\t        else {\r\n\t            try {\r\n\t                this.dissection = expression;\r\n\t            }\r\n\t            catch (error) {\r\n\t                throw new Error(error);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    CronExpression.prototype.getDissection = function () {\r\n\t        return this.dissection;\r\n\t    };\r\n\t    return CronExpression;\r\n\t}());\r\n\texports.CronExpression = CronExpression;\r\n\tvar CronParser = (function () {\r\n\t    function CronParser() {\r\n\t    }\r\n\t    CronParser.prototype.humanize = function (expression) {\r\n\t        var cron = new CronExpression(expression), order = ['month', 'dayOfWeek', 'year'];\r\n\t        var result = \"Fire \" + this.getTimeString(cron.seconds, cron.minutes, cron.hours), dayOfMonth = this.getDayOfMonthString(cron.dayOfMonth);\r\n\t        if (dayOfMonth.length > 0) {\r\n\t            result += \", \" + dayOfMonth;\r\n\t        }\r\n\t        if (cron.dayOfMonth.type != exports.CONSTANTS.TYPE_WILDCARD && cron.dayOfMonth.type != exports.CONSTANTS.TYPE_UNSPECIFIED &&\r\n\t            (cron.month.type === exports.CONSTANTS.TYPE_WILDCARD || cron.month.type === exports.CONSTANTS.TYPE_UNSPECIFIED)) {\r\n\t            result += \" of every month\";\r\n\t        }\r\n\t        for (var _i = 0, order_1 = order; _i < order_1.length; _i++) {\r\n\t            var key = order_1[_i];\r\n\t            if (cron[key].type != exports.CONSTANTS.TYPE_WILDCARD && cron[key].type != exports.CONSTANTS.TYPE_UNSPECIFIED) {\r\n\t                result += \", \" + this.getString(key, cron[key]);\r\n\t            }\r\n\t        }\r\n\t        return result + '.';\r\n\t    };\r\n\t    CronParser.prototype.getString = function (type, value) {\r\n\t        switch (type) {\r\n\t            case 'dayOfMonth':\r\n\t                return this.getDayOfMonthString(value);\r\n\t            case 'month':\r\n\t                return this.getMonthString(value);\r\n\t            case 'dayOfWeek':\r\n\t                return this.getDayOfWeekString(value);\r\n\t            case 'year':\r\n\t                return this.getYearString(value);\r\n\t            default:\r\n\t                throw new Error('Something went wrong.');\r\n\t        }\r\n\t    };\r\n\t    CronParser.prototype.getTimeString = function (seconds, minutes, hours) {\r\n\t        if (seconds.type === exports.CONSTANTS.TYPE_SINGLE && minutes.type === exports.CONSTANTS.TYPE_SINGLE && hours.type === exports.CONSTANTS.TYPE_SINGLE) {\r\n\t            return \"at \" + this.padZero(hours.single) + \":\" + this.padZero(minutes.single) + (seconds.single === 0 ? '' : ':' + this.padZero(seconds.single));\r\n\t        }\r\n\t        else if (seconds.type === exports.CONSTANTS.TYPE_WILDCARD && minutes.type === exports.CONSTANTS.TYPE_WILDCARD && hours.type === exports.CONSTANTS.TYPE_WILDCARD) {\r\n\t            return 'every second';\r\n\t        }\r\n\t        else if (seconds.type === exports.CONSTANTS.TYPE_INTERVAL && minutes.type === exports.CONSTANTS.TYPE_WILDCARD) {\r\n\t            return this.getSecondsString(seconds) + \", \" + this.getHoursString(hours);\r\n\t        }\r\n\t        else {\r\n\t            return this.getSecondsString(seconds) + \", \" + this.getMinutesString(minutes) + \", \" + this.getHoursString(hours);\r\n\t        }\r\n\t    };\r\n\t    CronParser.prototype.getSecondsString = function (seconds) {\r\n\t        switch (seconds.type) {\r\n\t            case exports.CONSTANTS.TYPE_WILDCARD:\r\n\t                return 'every second';\r\n\t            case exports.CONSTANTS.TYPE_UNSPECIFIED:\r\n\t                return '';\r\n\t            case exports.CONSTANTS.TYPE_RANGE:\r\n\t                return \"every second from \" + seconds.range.start + \" through \" + seconds.range.end;\r\n\t            case exports.CONSTANTS.TYPE_MULTI:\r\n\t                return \"at seconds \" + seconds.multi.values.join(', ') + \" and \" + seconds.multi.last;\r\n\t            case exports.CONSTANTS.TYPE_INTERVAL:\r\n\t                var isOne = seconds.interval.step === 1;\r\n\t                return \"every \" + (isOne ? '' : seconds.interval.step + ' ') + \"second\" + (isOne ? '' : 's') + (seconds.interval.start === 0 ? '' : ' starting at second ' + seconds.interval.start);\r\n\t            case exports.CONSTANTS.TYPE_SINGLE:\r\n\t            default:\r\n\t                return \"at second \" + seconds.single;\r\n\t        }\r\n\t    };\r\n\t    CronParser.prototype.getMinutesString = function (minutes) {\r\n\t        switch (minutes.type) {\r\n\t            case exports.CONSTANTS.TYPE_WILDCARD:\r\n\t                return 'every minute';\r\n\t            case exports.CONSTANTS.TYPE_UNSPECIFIED:\r\n\t                return '';\r\n\t            case exports.CONSTANTS.TYPE_RANGE:\r\n\t                return \"every minute from \" + minutes.range.start + \" through \" + minutes.range.end;\r\n\t            case exports.CONSTANTS.TYPE_MULTI:\r\n\t                return \"at minutes \" + minutes.multi.values.join(', ') + \" and \" + minutes.multi.last;\r\n\t            case exports.CONSTANTS.TYPE_INTERVAL:\r\n\t                var isOne = minutes.interval.step === 1;\r\n\t                return \"every \" + (isOne ? '' : minutes.interval.step + this.getOrdinal(minutes.interval.step) + ' ') + \"minute\" + (minutes.interval.start === 0 ? '' : ' starting at minute ' + minutes.interval.start);\r\n\t            case exports.CONSTANTS.TYPE_SINGLE:\r\n\t            default:\r\n\t                return \"at minute \" + minutes.single;\r\n\t        }\r\n\t    };\r\n\t    CronParser.prototype.getHoursString = function (hours) {\r\n\t        switch (hours.type) {\r\n\t            case exports.CONSTANTS.TYPE_WILDCARD:\r\n\t            case exports.CONSTANTS.TYPE_UNSPECIFIED:\r\n\t                return 'every hour';\r\n\t            case exports.CONSTANTS.TYPE_RANGE:\r\n\t                return \"during every hour from \" + this.pad(hours.range.start) + \" through \" + this.pad(hours.range.end);\r\n\t            case exports.CONSTANTS.TYPE_MULTI:\r\n\t                return \"during the hours \" + hours.multi.values.map(this.pad).join(', ') + \" and \" + this.pad(hours.multi.last);\r\n\t            case exports.CONSTANTS.TYPE_INTERVAL:\r\n\t                var isOne = hours.interval.step === 1;\r\n\t                return \"past every \" + (isOne ? '' : hours.interval.step + this.getOrdinal(hours.interval.step) + ' ') + \"hour starting at \" + this.pad(hours.interval.start);\r\n\t            case exports.CONSTANTS.TYPE_SINGLE:\r\n\t            default:\r\n\t                return \"at \" + this.pad(hours.single);\r\n\t        }\r\n\t    };\r\n\t    CronParser.prototype.getOrdinal = function (value) {\r\n\t        var numString = value.toString();\r\n\t        switch (parseInt(numString[numString.length - 1])) {\r\n\t            case 1:\r\n\t                return 'st';\r\n\t            case 2:\r\n\t                return 'nd';\r\n\t            case 3:\r\n\t                return 'rd';\r\n\t            default:\r\n\t                return 'th';\r\n\t        }\r\n\t    };\r\n\t    CronParser.prototype.pad = function (value) {\r\n\t        var converted = typeof value === 'number' ? value.toString() : value;\r\n\t        return converted.length === 1 ?\r\n\t            \"0\" + value + \":00\" :\r\n\t            value + \":00\";\r\n\t    };\r\n\t    CronParser.prototype.padZero = function (value) {\r\n\t        var converted = typeof value === 'number' ? value.toString() : value;\r\n\t        return converted.length === 1 ?\r\n\t            \"0\" + value :\r\n\t            \"\" + value;\r\n\t    };\r\n\t    CronParser.prototype.getDayOfMonthString = function (dayOfMonth) {\r\n\t        switch (dayOfMonth.type) {\r\n\t            case exports.CONSTANTS.TYPE_WILDCARD:\r\n\t                return 'every day';\r\n\t            case exports.CONSTANTS.TYPE_UNSPECIFIED:\r\n\t                return 'every day';\r\n\t            case exports.CONSTANTS.TYPE_RANGE:\r\n\t                return \"between the \" + (dayOfMonth.range.start + this.getOrdinal(dayOfMonth.range.start)) + \" and \" + (dayOfMonth.range.end + this.getOrdinal(dayOfMonth.range.end));\r\n\t            case exports.CONSTANTS.TYPE_MULTI:\r\n\t                return \"during the \" + dayOfMonth.multi.values.map(this.getOrdinal).join(', ') + \" and \" + dayOfMonth.multi.last;\r\n\t            case exports.CONSTANTS.TYPE_INTERVAL:\r\n\t                var isOne = dayOfMonth.interval.step === 1;\r\n\t                return \"every \" + (isOne ? '' : dayOfMonth.interval.step + ' ') + \"day\" + (isOne ? '' : 's') + \" starting on the \" + (dayOfMonth.interval.start + this.getOrdinal(dayOfMonth.interval.start));\r\n\t            case exports.CONSTANTS.TYPE_SINGLE:\r\n\t            default:\r\n\t                return \"on the \" + (dayOfMonth.single + this.getOrdinal(dayOfMonth.single));\r\n\t        }\r\n\t    };\r\n\t    CronParser.prototype.getYearString = function (years) {\r\n\t        switch (years.type) {\r\n\t            case exports.CONSTANTS.TYPE_WILDCARD:\r\n\t                return 'every year';\r\n\t            case exports.CONSTANTS.TYPE_UNSPECIFIED:\r\n\t                return '';\r\n\t            case exports.CONSTANTS.TYPE_RANGE:\r\n\t                return \"between \" + years.range.start + \" and \" + years.range.end;\r\n\t            case exports.CONSTANTS.TYPE_MULTI:\r\n\t                return \"during \" + years.multi.values.join(', ') + \" and \" + years.multi.last;\r\n\t            case exports.CONSTANTS.TYPE_INTERVAL:\r\n\t                var isOne = years.interval.step === 1;\r\n\t                return \"every \" + (isOne ? '' : years.interval.step + ' ') + \"year\" + (isOne ? '' : 's') + \" starting on \" + years.interval.start;\r\n\t            case exports.CONSTANTS.TYPE_SINGLE:\r\n\t            default:\r\n\t                return \"during \" + years.single;\r\n\t        }\r\n\t    };\r\n\t    CronParser.prototype.getMonthString = function (months) {\r\n\t        switch (months.type) {\r\n\t            case exports.CONSTANTS.TYPE_WILDCARD:\r\n\t                return 'every month';\r\n\t            case exports.CONSTANTS.TYPE_UNSPECIFIED:\r\n\t                return '';\r\n\t            case exports.CONSTANTS.TYPE_RANGE:\r\n\t                return \"in the months of \" + this.getMonthName(months.range.start) + \" through \" + this.getMonthName(months.range.end);\r\n\t            case exports.CONSTANTS.TYPE_MULTI:\r\n\t                return \"in the months of \" + months.multi.values.map(this.getMonthName).join(', ') + \" and \" + this.getMonthName(months.multi.last);\r\n\t            case exports.CONSTANTS.TYPE_INTERVAL:\r\n\t                var isOne = months.interval.step === 1;\r\n\t                return \"every \" + (isOne ? '' : months.interval.step + ' ') + \"month\" + (isOne ? '' : 's') + \" starting on \" + this.getMonthName(months.interval.start);\r\n\t            case exports.CONSTANTS.TYPE_SINGLE:\r\n\t            default:\r\n\t                return \"in the month of \" + this.getMonthName(months.single);\r\n\t        }\r\n\t    };\r\n\t    CronParser.prototype.getMonthName = function (month) {\r\n\t        return exports.CONSTANTS.FULL_MONTHS[month];\r\n\t    };\r\n\t    CronParser.prototype.getDayOfWeekString = function (days) {\r\n\t        switch (days.type) {\r\n\t            case exports.CONSTANTS.TYPE_WILDCARD:\r\n\t                return 'every day';\r\n\t            case exports.CONSTANTS.TYPE_UNSPECIFIED:\r\n\t                return '';\r\n\t            case exports.CONSTANTS.TYPE_RANGE:\r\n\t                return \"only from \" + this.getDayOfWeekName(days.range.start) + \" through \" + this.getDayOfWeekName(days.range.end);\r\n\t            case exports.CONSTANTS.TYPE_MULTI:\r\n\t                return \"only on \" + days.multi.values.map(this.getDayOfWeekName).join(', ') + \" and \" + this.getDayOfWeekName(days.multi.last);\r\n\t            case exports.CONSTANTS.TYPE_INTERVAL:\r\n\t                var isOne = days.interval.step === 1;\r\n\t                return \"every \" + (isOne ? '' : days.interval.step + ' ') + \"day\" + (isOne ? '' : 's') + \" starting on \" + this.getDayOfWeekName(days.interval.start);\r\n\t            case exports.CONSTANTS.TYPE_SINGLE:\r\n\t            default:\r\n\t                return \"only on \" + this.getDayOfWeekName(days.single) + \"s\";\r\n\t        }\r\n\t    };\r\n\t    CronParser.prototype.getDayOfWeekName = function (day) {\r\n\t        return exports.CONSTANTS.FULL_DAYS[day - 1];\r\n\t    };\r\n\t    return CronParser;\r\n\t}());\r\n\tangular\r\n\t    .module('cronHumanize', [])\r\n\t    .service('CronHumanize', CronParser);\r\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** dist/index.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap a4392c59c64cc3594c1e\n **/","\"use strict\";\r\nexports.CONSTANTS = {\r\n    SEPARATOR: ' ',\r\n    COMA: ',',\r\n    DASH: '-',\r\n    WILDCARD: '*',\r\n    UNSPECIFIED: '?',\r\n    SLASH: '/',\r\n    TYPE_MULTI: 'multi',\r\n    TYPE_RANGE: 'range',\r\n    TYPE_SINGLE: 'single',\r\n    TYPE_WILDCARD: 'wildcard',\r\n    TYPE_UNSPECIFIED: 'unspecified',\r\n    TYPE_INTERVAL: 'interval',\r\n    SHORT_DAYS: ['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN'],\r\n    FULL_DAYS: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\r\n    SHORT_MONTHS: ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'],\r\n    FULL_MONTHS: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\r\n};\r\nvar UnitDefinition = (function () {\r\n    function UnitDefinition(rawData, names, indexBase) {\r\n        this.rawData = rawData;\r\n        this.names = names;\r\n        this.indexBase = indexBase;\r\n        this.type = this.setType(rawData);\r\n        switch (this.type) {\r\n            case exports.CONSTANTS.TYPE_MULTI:\r\n                this.multi = this.getMultiDef(rawData);\r\n                break;\r\n            case exports.CONSTANTS.TYPE_RANGE:\r\n                this.range = this.getRangeDef(rawData);\r\n                break;\r\n            case exports.CONSTANTS.TYPE_INTERVAL:\r\n                this.interval = this.getIntervalDef(rawData);\r\n                break;\r\n            case exports.CONSTANTS.TYPE_UNSPECIFIED:\r\n                this.unspecified = this.getDef(rawData);\r\n                break;\r\n            case exports.CONSTANTS.TYPE_WILDCARD:\r\n                this.wildcard = this.getDef(rawData);\r\n                break;\r\n            case exports.CONSTANTS.TYPE_SINGLE:\r\n                this.single = this.getSingleDef(rawData);\r\n                break;\r\n        }\r\n    }\r\n    UnitDefinition.prototype.setType = function (value) {\r\n        if (value.indexOf(exports.CONSTANTS.COMA) > 0) {\r\n            return exports.CONSTANTS.TYPE_MULTI;\r\n        }\r\n        else if (value.indexOf(exports.CONSTANTS.WILDCARD) >= 0) {\r\n            return exports.CONSTANTS.TYPE_WILDCARD;\r\n        }\r\n        else if (value.indexOf(exports.CONSTANTS.UNSPECIFIED) >= 0) {\r\n            return exports.CONSTANTS.TYPE_UNSPECIFIED;\r\n        }\r\n        else if (value.indexOf(exports.CONSTANTS.SLASH) > 0) {\r\n            return exports.CONSTANTS.TYPE_INTERVAL;\r\n        }\r\n        else if (value.indexOf(exports.CONSTANTS.DASH) > 0) {\r\n            return exports.CONSTANTS.TYPE_RANGE;\r\n        }\r\n        else {\r\n            return exports.CONSTANTS.TYPE_SINGLE;\r\n        }\r\n    };\r\n    UnitDefinition.prototype.checkForNamed = function (value) {\r\n        return isNaN(parseInt(value)) ? this.getIndex(value) : parseInt(value);\r\n    };\r\n    UnitDefinition.prototype.getMultiDef = function (value) {\r\n        var _this = this;\r\n        var values = value.split(exports.CONSTANTS.COMA).map(function (current) { return _this.checkForNamed(current); }), last = values.pop();\r\n        return { values: values, last: last };\r\n    };\r\n    UnitDefinition.prototype.getRangeDef = function (value) {\r\n        var _this = this;\r\n        var range = value.split(exports.CONSTANTS.DASH).map(function (current) { return _this.checkForNamed(current); });\r\n        return {\r\n            start: range[0],\r\n            end: range[1]\r\n        };\r\n    };\r\n    UnitDefinition.prototype.getIntervalDef = function (value) {\r\n        var _this = this;\r\n        var interval = value.split('/').map(function (current) { return _this.checkForNamed(current); });\r\n        return {\r\n            start: interval[0],\r\n            step: interval[1]\r\n        };\r\n    };\r\n    UnitDefinition.prototype.getDef = function (value) {\r\n        return value;\r\n    };\r\n    UnitDefinition.prototype.getSingleDef = function (value) {\r\n        return this.checkForNamed(value);\r\n    };\r\n    UnitDefinition.prototype.getIndex = function (value) {\r\n        return this.names.indexOf(value) + this.indexBase;\r\n    };\r\n    return UnitDefinition;\r\n}());\r\nexports.UnitDefinition = UnitDefinition;\r\nvar CronExpression = (function () {\r\n    function CronExpression(expressionString) {\r\n        this.expressionString = expressionString;\r\n        this.setDissection(expressionString);\r\n        this.seconds = new UnitDefinition(this.dissection.seconds);\r\n        this.minutes = new UnitDefinition(this.dissection.minutes);\r\n        this.hours = new UnitDefinition(this.dissection.hours);\r\n        this.dayOfMonth = new UnitDefinition(this.dissection.dayOfMonth);\r\n        this.month = new UnitDefinition(this.dissection.month, exports.CONSTANTS.SHORT_MONTHS, 0);\r\n        this.dayOfWeek = new UnitDefinition(this.dissection.dayOfWeek, exports.CONSTANTS.SHORT_DAYS, 1);\r\n        this.year = new UnitDefinition(this.dissection.year);\r\n    }\r\n    CronExpression.prototype.getKey = function (key) {\r\n        return this[key];\r\n    };\r\n    CronExpression.prototype.setDissection = function (expression) {\r\n        if (!expression) {\r\n            throw new Error('A valid cron expression or generated expression must be provided.');\r\n        }\r\n        else if (typeof expression === 'string') {\r\n            var exprArray = expression.split(exports.CONSTANTS.SEPARATOR);\r\n            if (exprArray.length > 7 || exprArray.length < 6) {\r\n                throw new Error(\"Invalid cron expression: \" + expression + \". Wrong length: \" + exprArray.length + \".\");\r\n            }\r\n            this.dissection = {\r\n                seconds: exprArray[0],\r\n                minutes: exprArray[1],\r\n                hours: exprArray[2],\r\n                dayOfMonth: exprArray[3],\r\n                month: exprArray[4],\r\n                dayOfWeek: exprArray[5],\r\n                year: exprArray[6]\r\n            };\r\n        }\r\n        else {\r\n            try {\r\n                this.dissection = expression;\r\n            }\r\n            catch (error) {\r\n                throw new Error(error);\r\n            }\r\n        }\r\n    };\r\n    CronExpression.prototype.getDissection = function () {\r\n        return this.dissection;\r\n    };\r\n    return CronExpression;\r\n}());\r\nexports.CronExpression = CronExpression;\r\nvar CronParser = (function () {\r\n    function CronParser() {\r\n    }\r\n    CronParser.prototype.humanize = function (expression) {\r\n        var cron = new CronExpression(expression), order = ['month', 'dayOfWeek', 'year'];\r\n        var result = \"Fire \" + this.getTimeString(cron.seconds, cron.minutes, cron.hours), dayOfMonth = this.getDayOfMonthString(cron.dayOfMonth);\r\n        if (dayOfMonth.length > 0) {\r\n            result += \", \" + dayOfMonth;\r\n        }\r\n        if (cron.dayOfMonth.type != exports.CONSTANTS.TYPE_WILDCARD && cron.dayOfMonth.type != exports.CONSTANTS.TYPE_UNSPECIFIED &&\r\n            (cron.month.type === exports.CONSTANTS.TYPE_WILDCARD || cron.month.type === exports.CONSTANTS.TYPE_UNSPECIFIED)) {\r\n            result += \" of every month\";\r\n        }\r\n        for (var _i = 0, order_1 = order; _i < order_1.length; _i++) {\r\n            var key = order_1[_i];\r\n            if (cron[key].type != exports.CONSTANTS.TYPE_WILDCARD && cron[key].type != exports.CONSTANTS.TYPE_UNSPECIFIED) {\r\n                result += \", \" + this.getString(key, cron[key]);\r\n            }\r\n        }\r\n        return result + '.';\r\n    };\r\n    CronParser.prototype.getString = function (type, value) {\r\n        switch (type) {\r\n            case 'dayOfMonth':\r\n                return this.getDayOfMonthString(value);\r\n            case 'month':\r\n                return this.getMonthString(value);\r\n            case 'dayOfWeek':\r\n                return this.getDayOfWeekString(value);\r\n            case 'year':\r\n                return this.getYearString(value);\r\n            default:\r\n                throw new Error('Something went wrong.');\r\n        }\r\n    };\r\n    CronParser.prototype.getTimeString = function (seconds, minutes, hours) {\r\n        if (seconds.type === exports.CONSTANTS.TYPE_SINGLE && minutes.type === exports.CONSTANTS.TYPE_SINGLE && hours.type === exports.CONSTANTS.TYPE_SINGLE) {\r\n            return \"at \" + this.padZero(hours.single) + \":\" + this.padZero(minutes.single) + (seconds.single === 0 ? '' : ':' + this.padZero(seconds.single));\r\n        }\r\n        else if (seconds.type === exports.CONSTANTS.TYPE_WILDCARD && minutes.type === exports.CONSTANTS.TYPE_WILDCARD && hours.type === exports.CONSTANTS.TYPE_WILDCARD) {\r\n            return 'every second';\r\n        }\r\n        else if (seconds.type === exports.CONSTANTS.TYPE_INTERVAL && minutes.type === exports.CONSTANTS.TYPE_WILDCARD) {\r\n            return this.getSecondsString(seconds) + \", \" + this.getHoursString(hours);\r\n        }\r\n        else {\r\n            return this.getSecondsString(seconds) + \", \" + this.getMinutesString(minutes) + \", \" + this.getHoursString(hours);\r\n        }\r\n    };\r\n    CronParser.prototype.getSecondsString = function (seconds) {\r\n        switch (seconds.type) {\r\n            case exports.CONSTANTS.TYPE_WILDCARD:\r\n                return 'every second';\r\n            case exports.CONSTANTS.TYPE_UNSPECIFIED:\r\n                return '';\r\n            case exports.CONSTANTS.TYPE_RANGE:\r\n                return \"every second from \" + seconds.range.start + \" through \" + seconds.range.end;\r\n            case exports.CONSTANTS.TYPE_MULTI:\r\n                return \"at seconds \" + seconds.multi.values.join(', ') + \" and \" + seconds.multi.last;\r\n            case exports.CONSTANTS.TYPE_INTERVAL:\r\n                var isOne = seconds.interval.step === 1;\r\n                return \"every \" + (isOne ? '' : seconds.interval.step + ' ') + \"second\" + (isOne ? '' : 's') + (seconds.interval.start === 0 ? '' : ' starting at second ' + seconds.interval.start);\r\n            case exports.CONSTANTS.TYPE_SINGLE:\r\n            default:\r\n                return \"at second \" + seconds.single;\r\n        }\r\n    };\r\n    CronParser.prototype.getMinutesString = function (minutes) {\r\n        switch (minutes.type) {\r\n            case exports.CONSTANTS.TYPE_WILDCARD:\r\n                return 'every minute';\r\n            case exports.CONSTANTS.TYPE_UNSPECIFIED:\r\n                return '';\r\n            case exports.CONSTANTS.TYPE_RANGE:\r\n                return \"every minute from \" + minutes.range.start + \" through \" + minutes.range.end;\r\n            case exports.CONSTANTS.TYPE_MULTI:\r\n                return \"at minutes \" + minutes.multi.values.join(', ') + \" and \" + minutes.multi.last;\r\n            case exports.CONSTANTS.TYPE_INTERVAL:\r\n                var isOne = minutes.interval.step === 1;\r\n                return \"every \" + (isOne ? '' : minutes.interval.step + this.getOrdinal(minutes.interval.step) + ' ') + \"minute\" + (minutes.interval.start === 0 ? '' : ' starting at minute ' + minutes.interval.start);\r\n            case exports.CONSTANTS.TYPE_SINGLE:\r\n            default:\r\n                return \"at minute \" + minutes.single;\r\n        }\r\n    };\r\n    CronParser.prototype.getHoursString = function (hours) {\r\n        switch (hours.type) {\r\n            case exports.CONSTANTS.TYPE_WILDCARD:\r\n            case exports.CONSTANTS.TYPE_UNSPECIFIED:\r\n                return 'every hour';\r\n            case exports.CONSTANTS.TYPE_RANGE:\r\n                return \"during every hour from \" + this.pad(hours.range.start) + \" through \" + this.pad(hours.range.end);\r\n            case exports.CONSTANTS.TYPE_MULTI:\r\n                return \"during the hours \" + hours.multi.values.map(this.pad).join(', ') + \" and \" + this.pad(hours.multi.last);\r\n            case exports.CONSTANTS.TYPE_INTERVAL:\r\n                var isOne = hours.interval.step === 1;\r\n                return \"past every \" + (isOne ? '' : hours.interval.step + this.getOrdinal(hours.interval.step) + ' ') + \"hour starting at \" + this.pad(hours.interval.start);\r\n            case exports.CONSTANTS.TYPE_SINGLE:\r\n            default:\r\n                return \"at \" + this.pad(hours.single);\r\n        }\r\n    };\r\n    CronParser.prototype.getOrdinal = function (value) {\r\n        var numString = value.toString();\r\n        switch (parseInt(numString[numString.length - 1])) {\r\n            case 1:\r\n                return 'st';\r\n            case 2:\r\n                return 'nd';\r\n            case 3:\r\n                return 'rd';\r\n            default:\r\n                return 'th';\r\n        }\r\n    };\r\n    CronParser.prototype.pad = function (value) {\r\n        var converted = typeof value === 'number' ? value.toString() : value;\r\n        return converted.length === 1 ?\r\n            \"0\" + value + \":00\" :\r\n            value + \":00\";\r\n    };\r\n    CronParser.prototype.padZero = function (value) {\r\n        var converted = typeof value === 'number' ? value.toString() : value;\r\n        return converted.length === 1 ?\r\n            \"0\" + value :\r\n            \"\" + value;\r\n    };\r\n    CronParser.prototype.getDayOfMonthString = function (dayOfMonth) {\r\n        switch (dayOfMonth.type) {\r\n            case exports.CONSTANTS.TYPE_WILDCARD:\r\n                return 'every day';\r\n            case exports.CONSTANTS.TYPE_UNSPECIFIED:\r\n                return 'every day';\r\n            case exports.CONSTANTS.TYPE_RANGE:\r\n                return \"between the \" + (dayOfMonth.range.start + this.getOrdinal(dayOfMonth.range.start)) + \" and \" + (dayOfMonth.range.end + this.getOrdinal(dayOfMonth.range.end));\r\n            case exports.CONSTANTS.TYPE_MULTI:\r\n                return \"during the \" + dayOfMonth.multi.values.map(this.getOrdinal).join(', ') + \" and \" + dayOfMonth.multi.last;\r\n            case exports.CONSTANTS.TYPE_INTERVAL:\r\n                var isOne = dayOfMonth.interval.step === 1;\r\n                return \"every \" + (isOne ? '' : dayOfMonth.interval.step + ' ') + \"day\" + (isOne ? '' : 's') + \" starting on the \" + (dayOfMonth.interval.start + this.getOrdinal(dayOfMonth.interval.start));\r\n            case exports.CONSTANTS.TYPE_SINGLE:\r\n            default:\r\n                return \"on the \" + (dayOfMonth.single + this.getOrdinal(dayOfMonth.single));\r\n        }\r\n    };\r\n    CronParser.prototype.getYearString = function (years) {\r\n        switch (years.type) {\r\n            case exports.CONSTANTS.TYPE_WILDCARD:\r\n                return 'every year';\r\n            case exports.CONSTANTS.TYPE_UNSPECIFIED:\r\n                return '';\r\n            case exports.CONSTANTS.TYPE_RANGE:\r\n                return \"between \" + years.range.start + \" and \" + years.range.end;\r\n            case exports.CONSTANTS.TYPE_MULTI:\r\n                return \"during \" + years.multi.values.join(', ') + \" and \" + years.multi.last;\r\n            case exports.CONSTANTS.TYPE_INTERVAL:\r\n                var isOne = years.interval.step === 1;\r\n                return \"every \" + (isOne ? '' : years.interval.step + ' ') + \"year\" + (isOne ? '' : 's') + \" starting on \" + years.interval.start;\r\n            case exports.CONSTANTS.TYPE_SINGLE:\r\n            default:\r\n                return \"during \" + years.single;\r\n        }\r\n    };\r\n    CronParser.prototype.getMonthString = function (months) {\r\n        switch (months.type) {\r\n            case exports.CONSTANTS.TYPE_WILDCARD:\r\n                return 'every month';\r\n            case exports.CONSTANTS.TYPE_UNSPECIFIED:\r\n                return '';\r\n            case exports.CONSTANTS.TYPE_RANGE:\r\n                return \"in the months of \" + this.getMonthName(months.range.start) + \" through \" + this.getMonthName(months.range.end);\r\n            case exports.CONSTANTS.TYPE_MULTI:\r\n                return \"in the months of \" + months.multi.values.map(this.getMonthName).join(', ') + \" and \" + this.getMonthName(months.multi.last);\r\n            case exports.CONSTANTS.TYPE_INTERVAL:\r\n                var isOne = months.interval.step === 1;\r\n                return \"every \" + (isOne ? '' : months.interval.step + ' ') + \"month\" + (isOne ? '' : 's') + \" starting on \" + this.getMonthName(months.interval.start);\r\n            case exports.CONSTANTS.TYPE_SINGLE:\r\n            default:\r\n                return \"in the month of \" + this.getMonthName(months.single);\r\n        }\r\n    };\r\n    CronParser.prototype.getMonthName = function (month) {\r\n        return exports.CONSTANTS.FULL_MONTHS[month];\r\n    };\r\n    CronParser.prototype.getDayOfWeekString = function (days) {\r\n        switch (days.type) {\r\n            case exports.CONSTANTS.TYPE_WILDCARD:\r\n                return 'every day';\r\n            case exports.CONSTANTS.TYPE_UNSPECIFIED:\r\n                return '';\r\n            case exports.CONSTANTS.TYPE_RANGE:\r\n                return \"only from \" + this.getDayOfWeekName(days.range.start) + \" through \" + this.getDayOfWeekName(days.range.end);\r\n            case exports.CONSTANTS.TYPE_MULTI:\r\n                return \"only on \" + days.multi.values.map(this.getDayOfWeekName).join(', ') + \" and \" + this.getDayOfWeekName(days.multi.last);\r\n            case exports.CONSTANTS.TYPE_INTERVAL:\r\n                var isOne = days.interval.step === 1;\r\n                return \"every \" + (isOne ? '' : days.interval.step + ' ') + \"day\" + (isOne ? '' : 's') + \" starting on \" + this.getDayOfWeekName(days.interval.start);\r\n            case exports.CONSTANTS.TYPE_SINGLE:\r\n            default:\r\n                return \"only on \" + this.getDayOfWeekName(days.single) + \"s\";\r\n        }\r\n    };\r\n    CronParser.prototype.getDayOfWeekName = function (day) {\r\n        return exports.CONSTANTS.FULL_DAYS[day - 1];\r\n    };\r\n    return CronParser;\r\n}());\r\nangular\r\n    .module('cronHumanize', [])\r\n    .service('CronHumanize', CronParser);\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/cron-humanize.ts\n ** module id = 0\n ** module chunks = 0\n **/"],"sourceRoot":""}