{"version":3,"sources":["webpack:///webpack/bootstrap df10c2cfee6622fdf9b6","webpack:///./src/cron-humanize.ts"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAiF,qCAAqC,EAAE;AACxH,iBAAgB;AAChB;AACA;AACA;AACA,iFAAgF,qCAAqC,EAAE;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAgE,qCAAqC,EAAE;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC,qBAAqfile":"./dist/index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap df10c2cfee6622fdf9b6\n **/","\"use strict\";\r\nexports.CONSTANTS = {\r\n    SEPARATOR: ' ',\r\n    COMA: ',',\r\n    DASH: '-',\r\n    WILDCARD: '*',\r\n    UNSPECIFIED: '?',\r\n    SLASH: '/',\r\n    TYPE_MULTI: 'multi',\r\n    TYPE_RANGE: 'range',\r\n    TYPE_SINGLE: 'single',\r\n    TYPE_WILDCARD: 'wildcard',\r\n    TYPE_UNSPECIFIED: 'unspecified',\r\n    TYPE_INTERVAL: 'interval',\r\n    SHORT_DAYS: ['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN'],\r\n    FULL_DAYS: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\r\n    SHORT_MONTHS: ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'],\r\n    FULL_MONTHS: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\r\n};\r\nvar UnitDefinition = (function () {\r\n    function UnitDefinition(rawData, names, indexBase) {\r\n        this.rawData = rawData;\r\n        this.names = names;\r\n        this.indexBase = indexBase;\r\n        this.type = this.setType(rawData);\r\n        switch (this.type) {\r\n            case exports.CONSTANTS.TYPE_MULTI:\r\n                this.multi = this.getMultiDef(rawData);\r\n                break;\r\n            case exports.CONSTANTS.TYPE_RANGE:\r\n                this.range = this.getRangeDef(rawData);\r\n                break;\r\n            case exports.CONSTANTS.TYPE_INTERVAL:\r\n                this.interval = this.getIntervalDef(rawData);\r\n                break;\r\n            case exports.CONSTANTS.TYPE_UNSPECIFIED:\r\n                this.unspecified = this.getDef(rawData);\r\n                break;\r\n            case exports.CONSTANTS.TYPE_WILDCARD:\r\n                this.wildcard = this.getDef(rawData);\r\n                break;\r\n            case exports.CONSTANTS.TYPE_SINGLE:\r\n                this.single = this.getSingleDef(rawData);\r\n                break;\r\n        }\r\n    }\r\n    UnitDefinition.prototype.setType = function (value) {\r\n        if (value.indexOf(exports.CONSTANTS.COMA) > 0) {\r\n            return exports.CONSTANTS.TYPE_MULTI;\r\n        }\r\n        else if (value.indexOf(exports.CONSTANTS.WILDCARD) >= 0) {\r\n            return exports.CONSTANTS.TYPE_WILDCARD;\r\n        }\r\n        else if (value.indexOf(exports.CONSTANTS.UNSPECIFIED) >= 0) {\r\n            return exports.CONSTANTS.TYPE_UNSPECIFIED;\r\n        }\r\n        else if (value.indexOf(exports.CONSTANTS.SLASH) > 0) {\r\n            return exports.CONSTANTS.TYPE_INTERVAL;\r\n        }\r\n        else if (value.indexOf(exports.CONSTANTS.DASH) > 0) {\r\n            return exports.CONSTANTS.TYPE_RANGE;\r\n        }\r\n        else {\r\n            return exports.CONSTANTS.TYPE_SINGLE;\r\n        }\r\n    };\r\n    UnitDefinition.prototype.checkForNamed = function (value) {\r\n        return isNaN(parseInt(value)) ? this.getIndex(value) : parseInt(value);\r\n    };\r\n    UnitDefinition.prototype.getMultiDef = function (value) {\r\n        var _this = this;\r\n        var values = value.split(exports.CONSTANTS.COMA).map(function (current) { return _this.checkForNamed(current); }), last = values.pop();\r\n        return { values: values, last: last };\r\n    };\r\n    UnitDefinition.prototype.getRangeDef = function (value) {\r\n        var _this = this;\r\n        var range = value.split(exports.CONSTANTS.DASH).map(function (current) { return _this.checkForNamed(current); });\r\n        return {\r\n            start: range[0],\r\n            end: range[1]\r\n        };\r\n    };\r\n    UnitDefinition.prototype.getIntervalDef = function (value) {\r\n        var _this = this;\r\n        var interval = value.split('/').map(function (current) { return _this.checkForNamed(current); });\r\n        return {\r\n            start: interval[0],\r\n            step: interval[1]\r\n        };\r\n    };\r\n    UnitDefinition.prototype.getDef = function (value) {\r\n        return value;\r\n    };\r\n    UnitDefinition.prototype.getSingleDef = function (value) {\r\n        return this.checkForNamed(value);\r\n    };\r\n    UnitDefinition.prototype.getIndex = function (value) {\r\n        return this.names.indexOf(value) + this.indexBase;\r\n    };\r\n    return UnitDefinition;\r\n}());\r\nexports.UnitDefinition = UnitDefinition;\r\nvar CronExpression = (function () {\r\n    function CronExpression(expressionString) {\r\n        this.expressionString = expressionString;\r\n        this.setDissection(expressionString);\r\n        this.seconds = new UnitDefinition(this.dissection.seconds);\r\n        this.minutes = new UnitDefinition(this.dissection.minutes);\r\n        this.hours = new UnitDefinition(this.dissection.hours);\r\n        this.dayOfMonth = new UnitDefinition(this.dissection.dayOfMonth);\r\n        this.month = new UnitDefinition(this.dissection.month, exports.CONSTANTS.SHORT_MONTHS, 0);\r\n        this.dayOfWeek = new UnitDefinition(this.dissection.dayOfWeek, exports.CONSTANTS.SHORT_DAYS, 1);\r\n        this.year = new UnitDefinition(this.dissection.year);\r\n    }\r\n    CronExpression.prototype.getKey = function (key) {\r\n        return this[key];\r\n    };\r\n    CronExpression.prototype.setDissection = function (expression) {\r\n        if (!expression) {\r\n            throw new Error('A valid cron expression or generated expression must be provided.');\r\n        }\r\n        else if (typeof expression === 'string') {\r\n            var exprArray = expression.split(exports.CONSTANTS.SEPARATOR);\r\n            if (exprArray.length > 7 || exprArray.length < 6) {\r\n                throw new Error(\"Invalid cron expression: \" + expression + \". Wrong length: \" + exprArray.length + \".\");\r\n            }\r\n            this.dissection = {\r\n                seconds: exprArray[0],\r\n                minutes: exprArray[1],\r\n                hours: exprArray[2],\r\n                dayOfMonth: exprArray[3],\r\n                month: exprArray[4],\r\n                dayOfWeek: exprArray[5],\r\n                year: exprArray[6]\r\n            };\r\n        }\r\n        else {\r\n            try {\r\n                this.dissection = expression;\r\n            }\r\n            catch (error) {\r\n                throw new Error(error);\r\n            }\r\n        }\r\n    };\r\n    CronExpression.prototype.getDissection = function () {\r\n        return this.dissection;\r\n    };\r\n    return CronExpression;\r\n}());\r\nexports.CronExpression = CronExpression;\r\nvar CronParser = (function () {\r\n    function CronParser() {\r\n    }\r\n    CronParser.prototype.humanize = function (expression) {\r\n        var cron = new CronExpression(expression), order = ['month', 'dayOfWeek', 'year'];\r\n        var result = \"Fire \" + this.getTimeString(cron.seconds, cron.minutes, cron.hours), dayOfMonth = this.getDayOfMonthString(cron.dayOfMonth);\r\n        if (dayOfMonth.length > 0) {\r\n            result += \", \" + dayOfMonth;\r\n        }\r\n        if (cron.dayOfMonth.type != exports.CONSTANTS.TYPE_WILDCARD && cron.dayOfMonth.type != exports.CONSTANTS.TYPE_UNSPECIFIED &&\r\n            (cron.month.type === exports.CONSTANTS.TYPE_WILDCARD || cron.month.type === exports.CONSTANTS.TYPE_UNSPECIFIED)) {\r\n            result += \" of every month\";\r\n        }\r\n        for (var _i = 0, order_1 = order; _i < order_1.length; _i++) {\r\n            var key = order_1[_i];\r\n            if (cron[key].type != exports.CONSTANTS.TYPE_WILDCARD && cron[key].type != exports.CONSTANTS.TYPE_UNSPECIFIED) {\r\n                result += \", \" + this.getString(key, cron[key]);\r\n            }\r\n        }\r\n        return result + '.';\r\n    };\r\n    CronParser.prototype.getString = function (type, value) {\r\n        switch (type) {\r\n            case 'dayOfMonth':\r\n                return this.getDayOfMonthString(value);\r\n            case 'month':\r\n                return this.getMonthString(value);\r\n            case 'dayOfWeek':\r\n                return this.getDayOfWeekString(value);\r\n            case 'year':\r\n                return this.getYearString(value);\r\n            default:\r\n                throw new Error('Something went wrong.');\r\n        }\r\n    };\r\n    CronParser.prototype.getTimeString = function (seconds, minutes, hours) {\r\n        if (seconds.type === exports.CONSTANTS.TYPE_SINGLE && minutes.type === exports.CONSTANTS.TYPE_SINGLE && hours.type === exports.CONSTANTS.TYPE_SINGLE) {\r\n            return \"at \" + this.padZero(hours.single) + \":\" + this.padZero(minutes.single) + (seconds.single === 0 ? '' : ':' + this.padZero(seconds.single));\r\n        }\r\n        else if (seconds.type === exports.CONSTANTS.TYPE_WILDCARD && minutes.type === exports.CONSTANTS.TYPE_WILDCARD && hours.type === exports.CONSTANTS.TYPE_WILDCARD) {\r\n            return 'every second';\r\n        }\r\n        else if (seconds.type === exports.CONSTANTS.TYPE_INTERVAL && minutes.type === exports.CONSTANTS.TYPE_WILDCARD) {\r\n            return this.getSecondsString(seconds) + \", \" + this.getHoursString(hours);\r\n        }\r\n        else {\r\n            return this.getSecondsString(seconds) + \", \" + this.getMinutesString(minutes) + \", \" + this.getHoursString(hours);\r\n        }\r\n    };\r\n    CronParser.prototype.getSecondsString = function (seconds) {\r\n        switch (seconds.type) {\r\n            case exports.CONSTANTS.TYPE_WILDCARD:\r\n                return 'every second';\r\n            case exports.CONSTANTS.TYPE_UNSPECIFIED:\r\n                return '';\r\n            case exports.CONSTANTS.TYPE_RANGE:\r\n                return \"every second from \" + seconds.range.start + \" through \" + seconds.range.end;\r\n            case exports.CONSTANTS.TYPE_MULTI:\r\n                return \"at seconds \" + seconds.multi.values.join(', ') + \" and \" + seconds.multi.last;\r\n            case exports.CONSTANTS.TYPE_INTERVAL:\r\n                var isOne = seconds.interval.step === 1;\r\n                return \"every \" + (isOne ? '' : seconds.interval.step + ' ') + \"second\" + (isOne ? '' : 's') + (seconds.interval.start === 0 ? '' : ' starting at second ' + seconds.interval.start);\r\n            case exports.CONSTANTS.TYPE_SINGLE:\r\n            default:\r\n                return \"at second \" + seconds.single;\r\n        }\r\n    };\r\n    CronParser.prototype.getMinutesString = function (minutes) {\r\n        switch (minutes.type) {\r\n            case exports.CONSTANTS.TYPE_WILDCARD:\r\n                return 'every minute';\r\n            case exports.CONSTANTS.TYPE_UNSPECIFIED:\r\n                return '';\r\n            case exports.CONSTANTS.TYPE_RANGE:\r\n                return \"every minute from \" + minutes.range.start + \" through \" + minutes.range.end;\r\n            case exports.CONSTANTS.TYPE_MULTI:\r\n                return \"at minutes \" + minutes.multi.values.join(', ') + \" and \" + minutes.multi.last;\r\n            case exports.CONSTANTS.TYPE_INTERVAL:\r\n                var isOne = minutes.interval.step === 1;\r\n                return \"every \" + (isOne ? '' : minutes.interval.step + this.getOrdinal(minutes.interval.step) + ' ') + \"minute\" + (minutes.interval.start === 0 ? '' : ' starting at minute ' + minutes.interval.start);\r\n            case exports.CONSTANTS.TYPE_SINGLE:\r\n            default:\r\n                return \"at minute \" + minutes.single;\r\n        }\r\n    };\r\n    CronParser.prototype.getHoursString = function (hours) {\r\n        switch (hours.type) {\r\n            case exports.CONSTANTS.TYPE_WILDCARD:\r\n            case exports.CONSTANTS.TYPE_UNSPECIFIED:\r\n                return 'every hour';\r\n            case exports.CONSTANTS.TYPE_RANGE:\r\n                return \"during every hour from \" + this.pad(hours.range.start) + \" through \" + this.pad(hours.range.end);\r\n            case exports.CONSTANTS.TYPE_MULTI:\r\n                return \"during the hours \" + hours.multi.values.map(this.pad).join(', ') + \" and \" + this.pad(hours.multi.last);\r\n            case exports.CONSTANTS.TYPE_INTERVAL:\r\n                var isOne = hours.interval.step === 1;\r\n                return \"past every \" + (isOne ? '' : hours.interval.step + this.getOrdinal(hours.interval.step) + ' ') + \"hour starting at \" + this.pad(hours.interval.start);\r\n            case exports.CONSTANTS.TYPE_SINGLE:\r\n            default:\r\n                return \"at \" + this.pad(hours.single);\r\n        }\r\n    };\r\n    CronParser.prototype.getOrdinal = function (value) {\r\n        var numString = value.toString();\r\n        switch (parseInt(numString[numString.length - 1])) {\r\n            case 1:\r\n                return 'st';\r\n            case 2:\r\n                return 'nd';\r\n            case 3:\r\n                return 'rd';\r\n            default:\r\n                return 'th';\r\n        }\r\n    };\r\n    CronParser.prototype.pad = function (value) {\r\n        var converted = typeof value === 'number' ? value.toString() : value;\r\n        return converted.length === 1 ?\r\n            \"0\" + value + \":00\" :\r\n            value + \":00\";\r\n    };\r\n    CronParser.prototype.padZero = function (value) {\r\n        var converted = typeof value === 'number' ? value.toString() : value;\r\n        return converted.length === 1 ?\r\n            \"0\" + value :\r\n            \"\" + value;\r\n    };\r\n    CronParser.prototype.getDayOfMonthString = function (dayOfMonth) {\r\n        switch (dayOfMonth.type) {\r\n            case exports.CONSTANTS.TYPE_WILDCARD:\r\n                return 'every day';\r\n            case exports.CONSTANTS.TYPE_UNSPECIFIED:\r\n                return 'every day';\r\n            case exports.CONSTANTS.TYPE_RANGE:\r\n                return \"between the \" + (dayOfMonth.range.start + this.getOrdinal(dayOfMonth.range.start)) + \" and \" + (dayOfMonth.range.end + this.getOrdinal(dayOfMonth.range.end));\r\n            case exports.CONSTANTS.TYPE_MULTI:\r\n                return \"during the \" + dayOfMonth.multi.values.map(this.getOrdinal).join(', ') + \" and \" + dayOfMonth.multi.last;\r\n            case exports.CONSTANTS.TYPE_INTERVAL:\r\n                var isOne = dayOfMonth.interval.step === 1;\r\n                return \"every \" + (isOne ? '' : dayOfMonth.interval.step + ' ') + \"day\" + (isOne ? '' : 's') + \" starting on the \" + (dayOfMonth.interval.start + this.getOrdinal(dayOfMonth.interval.start));\r\n            case exports.CONSTANTS.TYPE_SINGLE:\r\n            default:\r\n                return \"on the \" + (dayOfMonth.single + this.getOrdinal(dayOfMonth.single));\r\n        }\r\n    };\r\n    CronParser.prototype.getYearString = function (years) {\r\n        switch (years.type) {\r\n            case exports.CONSTANTS.TYPE_WILDCARD:\r\n                return 'every year';\r\n            case exports.CONSTANTS.TYPE_UNSPECIFIED:\r\n                return '';\r\n            case exports.CONSTANTS.TYPE_RANGE:\r\n                return \"between \" + years.range.start + \" and \" + years.range.end;\r\n            case exports.CONSTANTS.TYPE_MULTI:\r\n                return \"during \" + years.multi.values.join(', ') + \" and \" + years.multi.last;\r\n            case exports.CONSTANTS.TYPE_INTERVAL:\r\n                var isOne = years.interval.step === 1;\r\n                return \"every \" + (isOne ? '' : years.interval.step + ' ') + \"year\" + (isOne ? '' : 's') + \" starting on \" + years.interval.start;\r\n            case exports.CONSTANTS.TYPE_SINGLE:\r\n            default:\r\n                return \"during \" + years.single;\r\n        }\r\n    };\r\n    CronParser.prototype.getMonthString = function (months) {\r\n        switch (months.type) {\r\n            case exports.CONSTANTS.TYPE_WILDCARD:\r\n                return 'every month';\r\n            case exports.CONSTANTS.TYPE_UNSPECIFIED:\r\n                return '';\r\n            case exports.CONSTANTS.TYPE_RANGE:\r\n                return \"in the months of \" + this.getMonthName(months.range.start) + \" through \" + this.getMonthName(months.range.end);\r\n            case exports.CONSTANTS.TYPE_MULTI:\r\n                return \"in the months of \" + months.multi.values.map(this.getMonthName).join(', ') + \" and \" + this.getMonthName(months.multi.last);\r\n            case exports.CONSTANTS.TYPE_INTERVAL:\r\n                var isOne = months.interval.step === 1;\r\n                return \"every \" + (isOne ? '' : months.interval.step + ' ') + \"month\" + (isOne ? '' : 's') + \" starting on \" + this.getMonthName(months.interval.start);\r\n            case exports.CONSTANTS.TYPE_SINGLE:\r\n            default:\r\n                return \"in the month of \" + this.getMonthName(months.single);\r\n        }\r\n    };\r\n    CronParser.prototype.getMonthName = function (month) {\r\n        return exports.CONSTANTS.FULL_MONTHS[month];\r\n    };\r\n    CronParser.prototype.getDayOfWeekString = function (days) {\r\n        switch (days.type) {\r\n            case exports.CONSTANTS.TYPE_WILDCARD:\r\n                return 'every day';\r\n            case exports.CONSTANTS.TYPE_UNSPECIFIED:\r\n                return '';\r\n            case exports.CONSTANTS.TYPE_RANGE:\r\n                return \"only from \" + this.getDayOfWeekName(days.range.start) + \" through \" + this.getDayOfWeekName(days.range.end);\r\n            case exports.CONSTANTS.TYPE_MULTI:\r\n                return \"only on \" + days.multi.values.map(this.getDayOfWeekName).join(', ') + \" and \" + this.getDayOfWeekName(days.multi.last);\r\n            case exports.CONSTANTS.TYPE_INTERVAL:\r\n                var isOne = days.interval.step === 1;\r\n                return \"every \" + (isOne ? '' : days.interval.step + ' ') + \"day\" + (isOne ? '' : 's') + \" starting on \" + this.getDayOfWeekName(days.interval.start);\r\n            case exports.CONSTANTS.TYPE_SINGLE:\r\n            default:\r\n                return \"only on \" + this.getDayOfWeekName(days.single) + \"s\";\r\n        }\r\n    };\r\n    CronParser.prototype.getDayOfWeekName = function (day) {\r\n        return exports.CONSTANTS.FULL_DAYS[day - 1];\r\n    };\r\n    return CronParser;\r\n}());\r\nangular\r\n    .module('cronHumanize')\r\n    .service('CronHumanize', CronParser);\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/cron-humanize.ts\n ** module id = 0\n ** module chunks = 0\n **/"],"sourceRoot":""}